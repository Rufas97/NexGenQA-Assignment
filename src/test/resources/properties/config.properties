text=source text = PI Planning Document \u2013 Result Admission Taskbar Overview The Result Admission Taskbar project is a key initiative under the upcoming Program Increment (PI). The goal of this PI is to streamline the student admission process by integrating result publication and admission workflows into a single, intuitive interface. Currently, students must navigate multiple portals for exam results and admission-related activities, which causes delays, confusion, and missed deadlines. The proposed solution will introduce a unified taskbar that centralizes result access, admission notifications, and action items, ensuring a smooth and transparent process for students, administrators, and faculty members. Business Objectives Improve Student Experience: Provide a single point of access where students can view exam results, receive admission offers, and complete enrollment steps.Operational Efficiency: Reduce manual intervention and administrative overhead by automating communication and status tracking. Compliance: Ensure that admission processes adhere to institutional regulations and timelines.Scalability: Support a growing number of applicants and courses without performance degradation.Key Features in ScopeUnified Result & Admission Dashboard: Displays exam results alongside pending admission tasks.Notification System: Real-time updates on admission status, deadlines, and document requirements.Automated Workflow: Admission steps automatically progress once prerequisites are met (e.g., result verification).Analytics & Reporting: Provide insights into admission trends, student demographics, and completion rates.Role-Based Access Control: Separate interfaces and permissions for students, faculty, and administrators.Out of ScopeThird-party integrations with external universities (deferred to future PI).Mobile application support (planned for later release).Program Increment ObjectivesLaunch the Result Admission Taskbar MVP with results and admission integration.Enable automated notifications for at least 80% of admission workflows.Deliver analytics dashboards for admission administrators.Achieve 95% uptime during admission season to handle peak loads.DependenciesStudent database service for fetching exam results.Admission management system for status updates.Notification gateway (email/SMS).Identity and access management for user authentication.Risks & MitigationsRisk: High system load during admission result publication.Mitigation: Implement load balancing and cloud autoscaling.Risk: Data inconsistency between result and admission systems.Mitigation: Establish automated reconciliation jobs.Risk: Delayed integration testing due to dependency on the student database team.Mitigation: Use mock APIs to simulate dependent systems.Team AssignmentsTeam A (Frontend): Build the dashboard UI and taskbar experience.Team B (Backend): Develop APIs for result and admission data integration.Team C (Notifications): Implement real-time communication channels.Team D (Analytics): Build reporting and visualization modules.MilestonesWeek 1\u20132: Requirement finalization and architecture design.Week 3\u20136: Development of core dashboard and workflows.Week 7\u20138: Integration testing and UAT.Week 9: Deployment and release readiness review.
text2=Qb summary =The Result Admission Taskbar project aims to enhance the student admission process by creating an integrated platform for result publication and admissions. Key objectives include improving the student experience, operational efficiency, compliance with regulations, and scalability. Features will consist of a unified dashboard displaying results and admission tasks, a notification system for real-time updates, automated workflows, analytics tools, and role-based access. The project excludes third-party integrations and mobile app support for now. Key milestones include requirement finalization, development, integration testing, and deployment, with teams assigned for frontend, backend, notifications, and analytics tasks. Risks are identified with mitigation strategies focusing on system load, data consistency, and testing delays.
text3=You are a meticulous QA evaluator.Task: Compare a human-readable summary produced by QuillBot (QB_SUMMARY) to a fresh summary you will generate from the provided text (SOURCE_TEXT). Work ONLY with the supplied materials do not use outside knowledge. Compare MODEL_SUMMARY vs QB_SUMMARY.Compute PERCENT_SCORE  and Classification: 1.PASS if >= 85,2.MODERATE if 65-84,3.FAIL if <=65,Output format"Status": "PASS" | "MODERATE" | "FAIL"  give status and percentage 
  

